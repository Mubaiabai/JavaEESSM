Spring 在不同的场景中表示不同的含义。早期的时候它被用来指代Spring Framework项目本身，这也是它一开始的含义。随着时间的推移，在Spring Framework之上建立了其他Spring项目，比如SpringSecurity、SpringBoot、SpringCloud。大部分情况下，当人们聊到Spring时，他们所说的 Spring 是 Spring 整个家族。

Spring 是一个轻量级的开源框架，是为解决企业应用开发的复杂性而创建的。而在我的理解中，Spring 的主要就解决了两件事情（当然它还解决了数据访问、远程调用、单元测试等问题），分别对应 Spring 的两个设计思想 IOC 和 AOP：

IOC 容器（解耦合）：解决各种 new 对象的问题
AOP （切面编程）：把非业务范畴的功能，提取成一个切面，统一实现

对springMVC的理解:
Spring MVC Framework有这样一些特点:
l 它是基于组件技术的.全部的应用对象,无论控制器和视图,还是业务对象之类的都是java组件.并且和Spring提供的其他基础结构紧密集成.
2 不依赖于Servlet API(目标虽是如此,但是在实现的时候确实是依赖于Servlet的)
3 可以任意使用各种视图技术
4 支持各种请求资源的映射策略
5 易于扩展的
6 在web.xml中的配置



对mybatis的理解:
MyBatis支持普通 SQL查询，存储过程和高级映射的优秀持久层框架。
在mybstis还没有出来之前,都是纯JDBC，纯JDBC也有些缺点的，SQL语句和JAVA代码是写在一起的，而这是两种不同的语言。重复的创建连接，效率不高。事务处理不灵活，不是面向切面，查询结果集的映射不方便。
而mybatis恰好解决了这些问题。SQL语句全部独立的保存在xml中，使用连接池技术，灵活高效。事务处理简单，面向切面编程。查询结
果集的映射自动化，动态SQL标签，使查询更强大。
mybatis用分层的方式来表示。可以分为基础支撑层、数据处理层、接口层。
基础支撑层包含了连接管理、事务管理、配置加载、缓存处理。
数据处理包含了参数映射、SQL解析、SQL执行，到最后的结果映射。
接口层是数据的数据查询、新增、更新、删除接口。
